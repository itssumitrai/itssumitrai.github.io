import './Card.svelte.css.proxy.js';
/* src/Card.svelte generated by Svelte v3.32.0 */
import {
	SvelteComponent,
	append,
	attr,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	set_data,
	set_style,
	space,
	text
} from "../_snowpack/pkg/svelte/internal.js";

function create_if_block_1(ctx) {
	let img;
	let img_src_value;

	return {
		c() {
			img = element("img");
			if (img.src !== (img_src_value = /*image*/ ctx[6])) attr(img, "src", img_src_value);
			attr(img, "alt", /*title*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, img, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*image*/ 64 && img.src !== (img_src_value = /*image*/ ctx[6])) {
				attr(img, "src", img_src_value);
			}

			if (dirty & /*title*/ 1) {
				attr(img, "alt", /*title*/ ctx[0]);
			}
		},
		d(detaching) {
			if (detaching) detach(img);
		}
	};
}

// (32:8) {:else}
function create_else_block(ctx) {
	let p;
	let t;

	return {
		c() {
			p = element("p");
			t = text(/*snippet*/ ctx[5]);
			attr(p, "class", "svelte-13b4bbp");
		},
		m(target, anchor) {
			insert(target, p, anchor);
			append(p, t);
		},
		p(ctx, dirty) {
			if (dirty & /*snippet*/ 32) set_data(t, /*snippet*/ ctx[5]);
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (30:8) {#if expanded}
function create_if_block(ctx) {
	let p;

	return {
		c() {
			p = element("p");
			attr(p, "class", "svelte-13b4bbp");
		},
		m(target, anchor) {
			insert(target, p, anchor);
			p.innerHTML = /*content*/ ctx[2];
		},
		p(ctx, dirty) {
			if (dirty & /*content*/ 4) p.innerHTML = /*content*/ ctx[2];;
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

function create_fragment(ctx) {
	let section;
	let t0;
	let div2;
	let h2;
	let t1;
	let t2;
	let div1;
	let a;
	let t3;
	let t4;
	let div0;
	let span0;
	let t5;
	let t6;
	let span1;
	let t7;
	let t8;
	let t9;
	let button;
	let t10_value = (/*expanded*/ ctx[8] ? "Back" : "Read more") + "";
	let t10;
	let section_class_value;
	let mounted;
	let dispose;
	let if_block0 = !/*expanded*/ ctx[8] && /*image*/ ctx[6] && create_if_block_1(ctx);

	function select_block_type(ctx, dirty) {
		if (/*expanded*/ ctx[8]) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block1 = current_block_type(ctx);

	return {
		c() {
			section = element("section");
			if (if_block0) if_block0.c();
			t0 = space();
			div2 = element("div");
			h2 = element("h2");
			t1 = text(/*title*/ ctx[0]);
			t2 = space();
			div1 = element("div");
			a = element("a");
			t3 = text(/*org*/ ctx[3]);
			t4 = space();
			div0 = element("div");
			span0 = element("span");
			t5 = text(/*location*/ ctx[7]);
			t6 = space();
			span1 = element("span");
			t7 = text(/*period*/ ctx[4]);
			t8 = space();
			if_block1.c();
			t9 = space();
			button = element("button");
			t10 = text(t10_value);
			attr(h2, "class", "svelte-13b4bbp");
			attr(a, "href", /*link*/ ctx[1]);
			attr(a, "class", "card-link svelte-13b4bbp");
			set_style(span0, "margin-right", "0.5rem");
			attr(span0, "class", "location svelte-13b4bbp");
			attr(span1, "class", "period svelte-13b4bbp");
			attr(div1, "class", "header svelte-13b4bbp");
			attr(button, "class", "actionBtn svelte-13b4bbp");
			attr(div2, "class", "svelte-13b4bbp");
			attr(section, "class", section_class_value = "card " + (/*expanded*/ ctx[8] ? "expanded" : "") + " svelte-13b4bbp");
		},
		m(target, anchor) {
			insert(target, section, anchor);
			if (if_block0) if_block0.m(section, null);
			append(section, t0);
			append(section, div2);
			append(div2, h2);
			append(h2, t1);
			append(div2, t2);
			append(div2, div1);
			append(div1, a);
			append(a, t3);
			append(div1, t4);
			append(div1, div0);
			append(div0, span0);
			append(span0, t5);
			append(div0, t6);
			append(div0, span1);
			append(span1, t7);
			append(div2, t8);
			if_block1.m(div2, null);
			append(div2, t9);
			append(div2, button);
			append(button, t10);

			if (!mounted) {
				dispose = listen(button, "click", /*handleClick*/ ctx[9]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!/*expanded*/ ctx[8] && /*image*/ ctx[6]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					if_block0.m(section, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (dirty & /*title*/ 1) set_data(t1, /*title*/ ctx[0]);
			if (dirty & /*org*/ 8) set_data(t3, /*org*/ ctx[3]);

			if (dirty & /*link*/ 2) {
				attr(a, "href", /*link*/ ctx[1]);
			}

			if (dirty & /*location*/ 128) set_data(t5, /*location*/ ctx[7]);
			if (dirty & /*period*/ 16) set_data(t7, /*period*/ ctx[4]);

			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block1) {
				if_block1.p(ctx, dirty);
			} else {
				if_block1.d(1);
				if_block1 = current_block_type(ctx);

				if (if_block1) {
					if_block1.c();
					if_block1.m(div2, t9);
				}
			}

			if (dirty & /*expanded*/ 256 && t10_value !== (t10_value = (/*expanded*/ ctx[8] ? "Back" : "Read more") + "")) set_data(t10, t10_value);

			if (dirty & /*expanded*/ 256 && section_class_value !== (section_class_value = "card " + (/*expanded*/ ctx[8] ? "expanded" : "") + " svelte-13b4bbp")) {
				attr(section, "class", section_class_value);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(section);
			if (if_block0) if_block0.d();
			if_block1.d();
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { title = "Card" } = $$props;
	let { link = "" } = $$props;
	let { content = "" } = $$props;
	let { org = "" } = $$props;
	let { period = "" } = $$props;
	let { snippet = "" } = $$props;
	let { image = "" } = $$props;
	let { location = "" } = $$props;
	let expanded = false;

	function handleClick() {
		$$invalidate(8, expanded = !expanded);
	}

	$$self.$$set = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("link" in $$props) $$invalidate(1, link = $$props.link);
		if ("content" in $$props) $$invalidate(2, content = $$props.content);
		if ("org" in $$props) $$invalidate(3, org = $$props.org);
		if ("period" in $$props) $$invalidate(4, period = $$props.period);
		if ("snippet" in $$props) $$invalidate(5, snippet = $$props.snippet);
		if ("image" in $$props) $$invalidate(6, image = $$props.image);
		if ("location" in $$props) $$invalidate(7, location = $$props.location);
	};

	return [
		title,
		link,
		content,
		org,
		period,
		snippet,
		image,
		location,
		expanded,
		handleClick
	];
}

class Card extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			title: 0,
			link: 1,
			content: 2,
			org: 3,
			period: 4,
			snippet: 5,
			image: 6,
			location: 7
		});
	}
}

export default Card;